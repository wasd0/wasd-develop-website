openapi: 3.0.0
info:
  title: Wasd-dev Personal page
  description: Create, edit, delete and view posts.
  version: 0.0.1
  contact: 
    name: Shvedov Kirill
    email: kirshvedov13@gmail.com
servers:
  - url: "http://localhost:8080"
    description: Development server
paths:
  /posts:
    get:
      summary: Returns a list of all posts
      tags:
        - Posts
      operationId: getAllPosts
      responses:
        '200':
          description: List of all posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '404':
          description: No posts for display
    post:
      summary: Create a post by authorized user
      tags:
        - Posts
      operationId: createPost
      security:
        - BasicAuth:
            - write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: Return new post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: Cannot create post without authorization

  /posts/{id}:
    get:
      summary: Return post by id
      tags:
        - Posts
      operationId: getPostById
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
          example: 1

      responses:
        '200':
          description: Post info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: No posts for display
    put:
      summary: Update post by id
      tags:
        - Posts
      operationId: updatePostById
      security:
        - BasicAuth:
            - update
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: Post info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: No posts for display
        '401':
          description: Cannot update post without authorization
    delete:
      summary: Delete users post
      tags:
        - Posts
      operationId: deletePostById
      security:
        - BasicAuth:
            - delete
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Post is deleted
        '403':
          description: Forbidden
  /posts/author/{username}:
    get:
      summary: Return a list of posts by author
      tags:
        - Posts
      operationId: getPostByAuthor
      parameters:
        - name: username
          in: path
          required: true
          description: author username
          schema:
            type: string
          example: user

      responses:
        '200':
          description: Post info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '404':
          description: No posts for display
  /users:
    get:
      summary: Return a list of users
      tags:
        - Users
      operationId: getAllUsers
      security:
        - BasicAuth:
            - read
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized
        '404':
          description: No users for display
    post:
      summary: Create user
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Return new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User with this username already exists
    put:
      summary: Update authorized user
      tags:
        - Users
      operationId: updateUserByUsername
      security:
        - BasicAuth:
            - update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User with this username already exists
        '401':
          description: Cannot update user without authorization

  /users/{username}:
    get:
      summary: Return user by username
      tags:
        - Users
      operationId: getUserByUsername
      security:
        - BasicAuth:
            - read
      parameters:
        - name: username
          in: path
          required: true
          description: username
          schema:
            type: string
          example: user
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '404':
          description: No users for display
    delete:
      summary: Delete users post
      tags:
        - Users
      operationId: deleteUserByUsername
      security:
        - BasicAuth:
            - delete
      parameters:
        - name: username
          in: path
          required: true
          description: username
          schema:
            type: string
          example: user
      responses:
        '204':
          description: User is deleted
        '401':
          description: Cannot delete user without authorization
        '404':
          description: User not found

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        username:
          type: string
          example: user
        email:
          type: string
          format: email
          example: user@user.com
        registrationDate:
          type: string
          format: date
          example: 2023-03-13T12:00:00+00
    UserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: user123
        password:
          type: string
          format: password
          example: qwerty123
        email:
          type: string
          format: email
          example: user@user.com
    Users:
      type: array
      items:
        $ref: '#/components/schemas/UserResponse'
    PostResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: Title example
        content:
          type: string
          example: Content example
        author:
          $ref: '#/components/schemas/UserResponse'
        creationDate:
          type: string
          format: date
          example: 2023-03-13T12:00:00+00
    PostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: Title example
        content:
          type: string
          example: Content example
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/PostResponse'